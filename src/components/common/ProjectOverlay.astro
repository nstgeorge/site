---
interface Props {
  title: string;
  backlink: string;
}

const { title, backlink } = Astro.props;
---

<script>
  import { animate, hover, motionValue, transform } from "motion";
  document.addEventListener("astro:page-load", (e) => {
    const shade = document.getElementById("shade");
    if (shade) {
      // Prevent scrolling on main page content
      document.body.style.overflow = "hidden";

      // Hide background of topnav
      document
        .getElementById("topnav-container")
        .classList.add("in-overlay-mode");

      // Rotate album art like card on hover
      const cover = document.getElementById("art-container");
      hover(cover, (elem) => {
        elem = elem.querySelector("#album-art");
        const xPos = motionValue(0);
        const yPos = motionValue(0);
        const handleMouseMove = (e) => {
          const rect = elem.getBoundingClientRect();
          xPos.set(
            transform(e.clientY - rect.y, [-10, rect.height + 10], [15, -15]),
          );
          yPos.set(
            transform(e.clientX - rect.x, [-10, rect.width + 10], [-15, 15]),
          );
        };

        xPos.on("change", (value) => {
          animate(
            elem,
            {
              rotateX: value,
            },
            {
              duration: 0.0,
            },
          );
        });

        yPos.on("change", (value) => {
          animate(
            elem,
            {
              rotateY: value,
            },
            {
              duration: 0.0,
            },
          );
        });

        elem.addEventListener("mousemove", handleMouseMove);

        animate(
          elem,
          {
            translateZ: 30,
          },
          {
            duration: 0.5,
            type: "spring",
          },
        );

        return () => {
          elem.removeEventListener("mousemove", handleMouseMove);
          animate(
            elem,
            { translateZ: -30, rotateX: 0, rotateY: 0 },
            { duration: 0.5, type: "spring" },
          );
        };
      });
    }

    const overlay = document.getElementById("overlay");
    const maximizeButton = document.getElementById("toggle-maximize");
    const maxIcon = document.getElementById("maximize");
    const minIcon = document.getElementById("minimize");
    const titleBar = document.getElementById("dialog-title");

    let topBarAnim;

    if (maximizeButton) {
      maximizeButton.addEventListener("click", () => {
        overlay.classList.toggle("z-50!");
        overlay.classList.toggle("m-0!");
        overlay.classList.toggle("inset-0!");
        overlay.classList.toggle("w-[100vw]!");
        overlay.classList.toggle("max-h-[100dvh]!");
        overlay.classList.toggle("rounded-xl");
        overlay.classList.toggle("pad-for-mobile");
        maxIcon.classList.toggle("hidden");
        minIcon.classList.toggle("hidden");
        titleBar.classList.toggle("-mt-12");
        if (overlay.scrollTop < 300) {
          topBarAnim = "up";
          animate(
            topBar,
            {
              y: 0,
            },
            // { duration: 0 },
          );
        }
        setTimeout(() => {
          window.dispatchEvent(new CustomEvent("nate:recheckCursorLocation"));
        }, 300);
      });
    }

    const topBar = document.getElementById("dialog-topbar");

    overlay?.addEventListener("scroll", (e) => {
      if (overlay.scrollTop > 300 && topBarAnim !== "down") {
        topBarAnim = "down";
        animate(
          topBar,
          {
            y: 64,
          },
          {
            // duration: 0,
          },
        );
      } else if (overlay.scrollTop < 300 && topBarAnim !== "up") {
        if (!minIcon.classList.contains("hidden")) {
        } else {
          topBarAnim = "up";
          animate(
            topBar,
            {
              y: 0,
            },
            // { duration: 0 },
          );
        }
      }
    });
  });
</script>
<style>
  .pad-for-mobile {
    padding-top: calc(constant(safe-area-inset-top, 20px) + 24px) !important;
    padding-top: calc(env(safe-area-inset-top, 20px) + 24px) !important;
  }
</style>
<a
  id="shade"
  href={backlink}
  class="fixed inset-0 w-full h-full backdrop-blur-2xl hover:backdrop-blur-md transition-all duration-500 bg-stone-600/30 dark:bg-black/40 flex items-center justify-center cursor-pointer"
>
</a>
<div
  class="absolute inset-0 flex items-center justify-center pointer-events-none"
>
  <dialog
    open
    id="overlay"
    class="rounded-xl shadow-xl relative m-5 lg:mx-auto mt-24 px-4 md:px-10 py-6 flex flex-col items-center gap-2 bg-gradient-to-tl from-stone-200 to-white dark:from-stone-800 dark:to-stone-700 dark:text-stone-50 cursor-default pointer-events-auto transition-all
          max-h-[70vh] overflow-auto z-30 contain-layout"
  >
    <div
      id="dialog-topbar"
      class="sticky top-0 rounded-md shadow-md w-full -translate-y-16 left-0 right-0 h-10 flex items-center justify-end px-5 py-2 bg-stone-300/30 dark:bg-stone-600/30 backdrop-blur-lg z-50"
    >
      <span class="flex-grow text-sm font-mono text-stone-400">{title}</span>
      <button
        id="toggle-maximize"
        class="w-4 h-4 text-stone-400 hover:text-cyan-600 transition-colors ml-2 cursor-pointer"
      >
        <svg
          id="maximize"
          class="hover:scale-110 transition-transform"
          xmlns="http://www.w3.org/2000/svg"
          width="100%"
          height="100%"
          viewBox="0 0 16 16"
          ><path
            fill="currentColor"
            d="M8.477 2a.75.75 0 0 0 0 1.5h2.962L3.5 11.44V8.476a.75.75 0 0 0-1.5 0v4.673c0 .47.38.85.85.85h4.673a.75.75 0 0 0 0-1.5H4.56L12.5 4.56v2.963a.75.75 0 0 0 1.5 0V2.85a.85.85 0 0 0-.85-.85z"
          ></path></svg
        >
        <svg
          id="minimize"
          class="hover:scale-90 transition-transform hidden"
          xmlns="http://www.w3.org/2000/svg"
          width="100%"
          height="100%"
          viewBox="0 0 16 16"
          ><path
            fill="currentColor"
            d="M13.78 3.28a.75.75 0 0 0-1.06-1.06L10.5 4.44V3.25a.75.75 0 0 0-1.5 0v2.9l.002.052a.748.748 0 0 0 .796.796L9.85 7h2.9a.75.75 0 0 0 0-1.5h-1.19zM6.25 13.5a.75.75 0 0 1-.75-.75v-1.19l-2.22 2.22a.75.75 0 0 1-1.06-1.06l2.22-2.22H3.25a.75.75 0 0 1 0-1.5h2.9l.052.002a.748.748 0 0 1 .796.796L7 9.85v2.9a.75.75 0 0 1-.75.75"
          ></path></svg
        >
      </button>
      <a
        href={backlink}
        class="w-4 h-4 text-stone-400 hover:text-rose-600 transition-colors ml-2 cursor-pointer"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="100%"
          height="100%"
          viewBox="0 0 15 15"
          ><path
            fill="currentColor"
            d="M3.64 2.27L7.5 6.13l3.84-3.84A.92.92 0 0 1 12 2a1 1 0 0 1 1 1a.9.9 0 0 1-.27.66L8.84 7.5l3.89 3.89A.9.9 0 0 1 13 12a1 1 0 0 1-1 1a.92.92 0 0 1-.69-.27L7.5 8.87l-3.85 3.85A.92.92 0 0 1 3 13a1 1 0 0 1-1-1a.9.9 0 0 1 .27-.66L6.16 7.5L2.27 3.61A.9.9 0 0 1 2 3a1 1 0 0 1 1-1c.24.003.47.1.64.27"
          ></path></svg
        >
      </a>
    </div>
    <div
      id="dialog-title"
      class="flex flex-row self-start items-center gap-2 w-full -mt-12"
    >
      <a id="go-back" class="cursor-pointer" href={backlink}>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          class="scale-150 text-stone-500 hover:text-stone-300 transition-colors"
        >
          <path
            fill="currentColor"
            fill-rule="evenodd"
            d="M14.03 7.47a.75.75 0 0 1 0 1.06L10.56 12l3.47 3.47a.75.75 0 1 1-1.06 1.06l-4-4a.75.75 0 0 1 0-1.06l4-4a.75.75 0 0 1 1.06 0"
            clip-rule="evenodd"></path>
        </svg>
      </a>
      <h1 class="m-0! font-display uppercase grow">
        {title}
      </h1>
      <slot name="after-title" />
    </div>
    <div class="mx-auto max-w-[40em] container flex flex-col items-center">
      <slot />
    </div>
  </dialog>
</div>
